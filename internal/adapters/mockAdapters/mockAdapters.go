// Code generated by MockGen. DO NOT EDIT.
// Source: adapterInterface.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"

	entities "github.com/akshaybt001/DatingApp_MatchMaking_Service/entities"
	helperStruct "github.com/akshaybt001/DatingApp_MatchMaking_Service/entities/helperStruct"
	gomock "github.com/golang/mock/gomock"
)

// MockAdapterInterface is a mock of AdapterInterface interface.
type MockAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterInterfaceMockRecorder
}

// MockAdapterInterfaceMockRecorder is the mock recorder for MockAdapterInterface.
type MockAdapterInterfaceMockRecorder struct {
	mock *MockAdapterInterface
}

// NewMockAdapterInterface creates a new mock instance.
func NewMockAdapterInterface(ctrl *gomock.Controller) *MockAdapterInterface {
	mock := &MockAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapterInterface) EXPECT() *MockAdapterInterfaceMockRecorder {
	return m.recorder
}

// FindWhoLikesUser mocks base method.
func (m *MockAdapterInterface) FindWhoLikesUser(id string) ([]entities.Likes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWhoLikesUser", id)
	ret0, _ := ret[0].([]entities.Likes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWhoLikesUser indicates an expected call of FindWhoLikesUser.
func (mr *MockAdapterInterfaceMockRecorder) FindWhoLikesUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWhoLikesUser", reflect.TypeOf((*MockAdapterInterface)(nil).FindWhoLikesUser), id)
}

// GetMatch mocks base method.
func (m *MockAdapterInterface) GetMatch(userId string) ([]helperStruct.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatch", userId)
	ret0, _ := ret[0].([]helperStruct.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatch indicates an expected call of GetMatch.
func (mr *MockAdapterInterfaceMockRecorder) GetMatch(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatch", reflect.TypeOf((*MockAdapterInterface)(nil).GetMatch), userId)
}

// IsLikeExist mocks base method.
func (m *MockAdapterInterface) IsLikeExist(userId, likedId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLikeExist", userId, likedId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLikeExist indicates an expected call of IsLikeExist.
func (mr *MockAdapterInterfaceMockRecorder) IsLikeExist(userId, likedId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLikeExist", reflect.TypeOf((*MockAdapterInterface)(nil).IsLikeExist), userId, likedId)
}

// IsMatchExist mocks base method.
func (m *MockAdapterInterface) IsMatchExist(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMatchExist", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMatchExist indicates an expected call of IsMatchExist.
func (mr *MockAdapterInterfaceMockRecorder) IsMatchExist(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMatchExist", reflect.TypeOf((*MockAdapterInterface)(nil).IsMatchExist), id)
}

// Like mocks base method.
func (m *MockAdapterInterface) Like(userId, likedId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", userId, likedId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockAdapterInterfaceMockRecorder) Like(userId, likedId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockAdapterInterface)(nil).Like), userId, likedId)
}

// Match mocks base method.
func (m *MockAdapterInterface) Match(userId, matchId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", userId, matchId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockAdapterInterfaceMockRecorder) Match(userId, matchId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockAdapterInterface)(nil).Match), userId, matchId)
}

// UnMatch mocks base method.
func (m *MockAdapterInterface) UnMatch(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnMatch", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnMatch indicates an expected call of UnMatch.
func (mr *MockAdapterInterfaceMockRecorder) UnMatch(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMatch", reflect.TypeOf((*MockAdapterInterface)(nil).UnMatch), id)
}
